<!DOCTYPE html>
<html>
<head>
    <title>QQ机器人管理面板</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            min-height: 100vh;
            background-color: #f8f9fa;
        }
        .sidebar {
            width: 280px;
            background: white;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
            position: fixed;
            top: 0;
            bottom: 0;
            left: 0;
            z-index: 100;
        }
        .main-content {
            margin-left: 280px;
            padding: 20px;
        }
        .nav-link {
            color: #495057;
            padding: 12px 20px;
            border-radius: 0;
            transition: all 0.3s;
        }
        .nav-link:hover {
            background-color: #f8f9fa;
            color: #0d6efd;
        }
        .nav-link.active {
            background-color: #e9ecef;
            color: #0d6efd;
            border-left: 4px solid #0d6efd;
        }
        .status-card {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .status-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.15);
        }
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .stats-icon {
            font-size: 1.2rem;
            margin-right: 10px;
            width: 24px;
            text-align: center;
        }
        .content-section {
            display: none;
        }
        .content-section.active {
            display: block;
        }
        .bot-status {
            padding: 20px;
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 10px;
        }
        .table th {
            background-color: #f8f9fa;
        }
        .log-container {
            height: 600px;
            overflow-y: auto;
            padding: 1rem;
            font-family: 'Consolas', monospace;
            font-size: 0.9rem;
            background-color: #1e1e1e;
            color: #d4d4d4;
            position: relative;
        }
        .log-entry {
            margin-bottom: 0.5rem;
            white-space: pre-wrap;
            word-wrap: break-word;
            opacity: 0;
            animation: fadeIn 0.3s ease forwards;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .log-timestamp {
            color: #569cd6;
            user-select: none;
        }
        .log-level {
            padding: 0.1rem 0.3rem;
            border-radius: 3px;
            margin-right: 0.5rem;
            font-size: 0.8rem;
            font-weight: bold;
            user-select: none;
        }
        .log-level-log { background-color: #4b4b4b; color: #d4d4d4; }
        .log-level-error { background-color: #f44336; color: white; }
        .log-level-warn { background-color: #ffc107; color: black; }
        .log-level-info { background-color: #2196f3; color: white; }
        .log-message {
            font-family: 'Consolas', monospace;
        }
        .log-filter-bar {
            margin-bottom: 1rem;
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }
        .log-filter-bar .form-check {
            margin-right: 1rem;
        }
        .auto-scroll-toggle {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            z-index: 1000;
            opacity: 0.8;
            transition: opacity 0.3s;
        }
        .auto-scroll-toggle:hover {
            opacity: 1;
        }
        .highlight {
            background-color: #ffd700;
            color: #000;
        }
        .chat-window {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 350px;
            height: 500px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            z-index: 1000;
        }
        .chat-header {
            padding: 10px 15px;
            background: #f8f9fa;
            border-radius: 8px 8px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
        }
        .chat-message {
            display: flex;
            align-items: start;
            margin-bottom: 20px;
            max-width: 85%;
        }
        .chat-message.sent {
            margin-left: auto;
            flex-direction: row-reverse;
        }
        .chat-message.received {
            margin-right: auto;
        }
        .chat-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin: 0 8px;
        }
        .chat-content {
            display: flex;
            flex-direction: column;
        }
        .chat-bubble {
            padding: 8px 12px;
            border-radius: 15px;
        }
        .chat-message.sent .chat-bubble {
            background: #007bff;
            color: white;
            border-radius: 15px 15px 0 15px;
        }
        .chat-message.received .chat-bubble {
            background: #e9ecef;
            border-radius: 15px 15px 15px 0;
        }
        .chat-image {
            max-width: 200px;
            max-height: 200px;
            border-radius: 8px;
            cursor: pointer;
        }
        .message-time {
            font-size: 0.8em;
            color: #888;
            margin-bottom: 2px;
        }
    </style>
</head>
<body>
    <!-- 在 body 开始处添加全局变量 -->
    <script>
        // 从服务器端传递的数据
        const botInfo = <%- JSON.stringify(botInfo) %>;
    </script>

    <!-- 左侧边栏 -->
    <div class="sidebar">
        <div class="bot-status">
            <div class="d-flex align-items-center mb-3">
                <i class="bi bi-robot stats-icon"></i>
                <h5 class="mb-0">QQ机器人管理面板</h5>
            </div>
            <div class="d-flex align-items-center">
                <span id="status-badge" class="badge rounded-pill <%= botInfo.online ? 'bg-success' : 'bg-danger' %>">
                    <i class="bi <%= botInfo.online ? 'bi-check-circle' : 'bi-x-circle' %>"></i>
                    <%= botInfo.online ? '在线' : '离线' %>
                </span>
            </div>
        </div>
        <div class="nav flex-column nav-pills">
            <a class="nav-link active" href="#" onclick="showSection('bot-info')">
                <i class="bi bi-info-circle stats-icon"></i>机器人信息
            </a>
            <a class="nav-link" href="#" onclick="showSection('friend-list')">
                <i class="bi bi-people stats-icon"></i>好友列表
            </a>
            <a class="nav-link" href="#" onclick="showSection('group-list')">
                <i class="bi bi-chat-dots stats-icon"></i>群聊列表
            </a>
            <a class="nav-link" href="#" onclick="showSection('plugin-list')">
                <i class="bi bi-puzzle stats-icon"></i>插件管理
            </a>
            <a class="nav-link" href="#" onclick="showSection('log-view')">
                <i class="bi bi-terminal stats-icon"></i>日志查看
            </a>
            <a class="nav-link text-danger mt-auto" href="/logout">
                <i class="bi bi-box-arrow-right stats-icon"></i>退出登录
            </a>
        </div>
    </div>

    <!-- 主要内容区域 -->
    <div class="main-content">
        <!-- 机器人信息 -->
        <div id="bot-info" class="content-section active">
            <h4 class="mb-4">机器人信息</h4>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="card status-card">
                        <div class="card-header">
                            <h5 class="mb-0">基本信息</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-person-badge stats-icon"></i>
                                <div>
                                    <small class="text-muted">QQ账号</small>
                                    <div id="bot-qq"><%= botInfo.qq %></div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-person stats-icon"></i>
                                <div>
                                    <small class="text-muted">昵称</small>
                                    <div id="bot-nickname"><%= botInfo.nickname %></div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-people stats-icon"></i>
                                <div>
                                    <small class="text-muted">好友数量</small>
                                    <div id="friend-count"><%= botInfo.friends %></div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="bi bi-chat-dots stats-icon"></i>
                                <div>
                                    <small class="text-muted">群聊数量</small>
                                    <div id="group-count"><%= botInfo.groups %></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-4">
                    <div class="card status-card">
                        <div class="card-header">
                            <h5 class="mb-0">系统状态</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-clock-history stats-icon"></i>
                                <div>
                                    <small class="text-muted">运行时间</small>
                                    <div id="uptime"><%= botInfo.uptime %></div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-chat-dots stats-icon"></i>
                                <div>
                                    <small class="text-muted">今日回复</small>
                                    <div id="daily-reply-count"><%= botInfo.dailyReplyCount %>次</div>
                                </div>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="bi bi-quote stats-icon"></i>
                                <div>
                                    <small class="text-muted">每日一言</small>
                                    <div id="daily-word" class="text-wrap"><%= botInfo.dailyWord %></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 mb-4">
                    <div class="card status-card">
                        <div class="card-header">
                            <h5 class="mb-0">发送消息</h5>
                        </div>
                        <div class="card-body">
                            <form id="send-message-form">
                                <div class="row g-3">
                                    <div class="col-md-2">
                                        <label class="form-label">消息类型</label>
                                        <select class="form-select" id="message-type" required>
                                            <option value="private">私聊消息</option>
                                            <option value="group">群消息</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">目标ID</label>
                                        <div class="input-group">
                                            <input type="number" class="form-control" id="target-id" required>
                                            <button type="button" class="btn btn-outline-secondary" onclick="showSelector()">
                                                <i class="bi bi-list"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-md-5">
                                        <label class="form-label">消息内容</label>
                                        <input type="text" class="form-control" id="message-content" required>
                                    </div>
                                    <div class="col-md-2 d-flex align-items-end">
                                        <button type="submit" class="btn btn-primary w-100">
                                            <i class="bi bi-send"></i> 发送
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 好友列表 -->
        <div id="friend-list" class="content-section">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">好友列表</h4>
                <button class="btn btn-primary" onclick="loadFriends()">
                    <i class="bi bi-arrow-clockwise"></i> 刷新列表
                </button>
            </div>
            <div class="table-container">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead>
                            <tr>
                                <th>QQ号</th>
                                <th>昵称</th>
                                <th>备注</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="friend-table-body">
                            <!-- 好友列表将通过JavaScript动态填充 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- 群聊列表 -->
        <div id="group-list" class="content-section">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">群聊列表</h4>
                <button class="btn btn-primary" onclick="refreshGroups()">
                    <i class="bi bi-arrow-clockwise"></i> 刷新列表
                </button>
            </div>
            <div class="table-container">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead>
                            <tr>
                                <th>群号</th>
                                <th>群名</th>
                                <th>成员数</th>
                                <th>状态</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="group-table-body">
                            <!-- 群列表将通过JavaScript动态填充 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- 插件列表 -->
        <div id="plugin-list" class="content-section">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">插件管理</h4>
            </div>
            <div class="row" id="plugin-container">
                <!-- 插件卡片将通过JavaScript动态填充 -->
            </div>
        </div>

        <!-- 日志查看区域 -->
        <div id="log-view" class="content-section">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">系统日志</h4>
                <div>
                    <button class="btn btn-outline-secondary me-2" onclick="exportLogs()">
                        <i class="bi bi-download"></i> 导出日志
                    </button>
                    <button class="btn btn-outline-danger" onclick="clearLogs()">
                        <i class="bi bi-trash"></i> 清除日志
                    </button>
                </div>
            </div>
            <div class="card status-card">
                <div class="card-body">
                    <div class="log-filter-bar">
                        <div class="input-group" style="max-width: 300px;">
                            <input type="text" class="form-control" id="log-search" 
                                   placeholder="搜索日志..." onkeyup="filterLogs()">
                            <button class="btn btn-outline-secondary" type="button" onclick="clearSearch()">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="level-log" checked onchange="filterLogs()">
                            <label class="form-check-label" for="level-log">
                                <span class="log-level log-level-log">LOG</span>
                            </label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="level-info" checked onchange="filterLogs()">
                            <label class="form-check-label" for="level-info">
                                <span class="log-level log-level-info">INFO</span>
                            </label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="level-warn" checked onchange="filterLogs()">
                            <label class="form-check-label" for="level-warn">
                                <span class="log-level log-level-warn">WARN</span>
                            </label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="level-error" checked onchange="filterLogs()">
                            <label class="form-check-label" for="level-error">
                                <span class="log-level log-level-error">ERROR</span>
                            </label>
                        </div>
                    </div>
                    <div id="log-container" class="log-container">
                        <!-- 日志内容将通过JavaScript动态填充 -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 添加选择器模态框 -->
    <div class="modal fade" id="selectorModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">选择目标</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs" id="selectorTabs">
                        <li class="nav-item">
                            <a class="nav-link active" data-bs-toggle="tab" href="#friendTab">好友列表</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" href="#groupTab">群列表</a>
                        </li>
                    </ul>
                    <div class="tab-content mt-3">
                        <div class="tab-pane fade show active" id="friendTab">
                            <div class="list-group" id="friendSelector">
                                <!-- 好友列表将通过JavaScript动态填充 -->
                            </div>
                        </div>
                        <div class="tab-pane fade" id="groupTab">
                            <div class="list-group" id="groupSelector">
                                <!-- 群列表将通过JavaScript动态填充 -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-primary auto-scroll-toggle" id="auto-scroll-toggle" 
            onclick="toggleAutoScroll()" title="自动滚动">
        <i class="bi bi-arrow-down-circle"></i>
    </button>

    <!-- 在 body 末尾添加聊天窗口模板 -->
    <div class="chat-window" id="chatWindow" style="display: none;">
        <div class="chat-header">
            <div class="d-flex align-items-center">
                <img id="chatAvatar" class="chat-avatar" src="" alt="头像">
                <span id="chatTitle">与 xxx 聊天中</span>
            </div>
            <button type="button" class="btn-close" onclick="closeChat()"></button>
        </div>
        <div class="chat-messages" id="chatMessages"></div>
        <div class="chat-input">
            <div class="input-toolbar">
                <button class="btn btn-light btn-sm" onclick="showEmojiPicker()">
                    <i class="bi bi-emoji-smile"></i>
                </button>
                <button class="btn btn-light btn-sm" onclick="document.getElementById('imageUpload').click()">
                    <i class="bi bi-image"></i>
                </button>
                <input type="file" id="imageUpload" accept="image/*" style="display: none" onchange="handleImageUpload(event)">
            </div>
            <div class="input-group">
                <input type="text" class="form-control" id="messageInput" placeholder="输入消息...">
                <button class="btn btn-primary" onclick="sendChatMessage()">发送</button>
            </div>
        </div>
        <div id="emojiPicker" class="emoji-picker" style="display: none;"></div>
    </div>

    <script>
        const socket = io();
        let currentChatTarget = null;
        let currentChatInfo = null;
        
        // 更新状态的函数
        function updateStatus(data) {
            try {
                // 更新全局 botInfo
                if (data.botInfo) {
                    Object.assign(botInfo, data.botInfo);
                }
                
                // 更新在线状态
                const statusBadge = document.getElementById('status-badge');
                if (statusBadge) {
                    statusBadge.className = `badge rounded-pill ${data.online ? 'bg-success' : 'bg-danger'}`;
                    statusBadge.innerHTML = `<i class="bi bi-${data.online ? 'check-circle' : 'x-circle'}"></i> ${data.online ? '在线' : '离线'}`;
                }

                // 更新机器人信息
                if (data.botInfo) {
                    const elements = {
                        'bot-qq': data.botInfo.qq,
                        'bot-nickname': data.botInfo.nickname,
                        'friend-count': data.botInfo.friends,
                        'group-count': data.botInfo.groups,
                        'uptime': data.botInfo.uptime,
                        'daily-reply-count': data.botInfo.dailyReplyCount + '次',
                        'daily-word': data.botInfo.dailyWord
                    };

                    for (const [id, value] of Object.entries(elements)) {
                        const element = document.getElementById(id);
                        if (element) {
                            element.textContent = value;
                        }
                    }
                }

                // 更新统计信息
                if (data.stats) {
                    const uptimeElement = document.getElementById('uptime');
                    if (uptimeElement) {
                        const hours = Math.floor(data.stats.uptime / 3600);
                        const minutes = Math.floor((data.stats.uptime % 3600) / 60);
                        uptimeElement.textContent = `${hours}小时${minutes}分钟`;
                    }

                    const memoryElement = document.getElementById('memory-usage');
                    if (memoryElement) {
                        const memoryUsage = Math.round(data.stats.memory.heapUsed / 1024 / 1024);
                        memoryElement.textContent = `${memoryUsage}MB`;
                    }

                    const lastUpdateElement = document.getElementById('last-update');
                    if (lastUpdateElement) {
                        lastUpdateElement.textContent = data.stats.lastUpdate;
                    }
                }
            } catch (error) {
                console.error('更新状态失败:', error);
            }
        }

        // 监听状态更新
        socket.on('status', updateStatus);

        // 监听私聊消息
        socket.on('privateMessage', (data) => {
            try {
                console.log('收到私聊消息:', data);
                if (!data || !currentChatTarget) return;

                // 如果消息来自当前聊天的用户，则显示消息
                if (data.sender_id === parseInt(currentChatTarget)) {
                    // 处理不同类型的消息
                    if (Array.isArray(data.message)) {
                        data.message.forEach(msg => {
                            if (msg.type === 'text') {
                                addMessage(msg.text, false);
                            } else if (msg.type === 'image') {
                                addMessage(msg.file, false);
                            }
                        });
                    } else if (typeof data.message === 'object') {
                        if (data.message.type === 'text') {
                            addMessage(data.message.text, false);
                        } else if (data.message.type === 'image') {
                            addMessage(data.message.file, false);
                        }
                    } else {
                        // 直接显示消息内容
                        addMessage(data.raw_message || data.message || '', false);
                    }
                }
            } catch (error) {
                console.error('处理私聊消息失败:', error);
            }
        });

        // 修改这部分代码，添加表单存在性检查
        // 发送消息
        const messageForm = document.getElementById('message-form');
        if (messageForm) {
            messageForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const user_id = document.getElementById('receiver-qq').value;
                const message = document.getElementById('message-content').value;

                try {
                    const response = await fetch('/api/send', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ user_id, message })
                    });

                    const result = await response.json();
                    if (result.success) {
                        alert('发送成功！');
                        document.getElementById('message-content').value = '';
                    } else {
                        alert('发送失败：' + result.error);
                    }
                } catch (error) {
                    alert('发送失败：' + error.message);
                }
            });
        }

        // 加载好友列表
        async function loadFriends() {
            try {
                const response = await fetch('/api/friends');
                const friends = await response.json();
                const tbody = document.getElementById('friend-table-body');
                tbody.innerHTML = friends.map(friend => `
                    <tr>
                        <td>${friend.user_id}</td>
                        <td>${friend.nickname}</td>
                        <td>${friend.remark || '-'}</td>
                        <td class="action-buttons">
                            <button class="btn btn-sm btn-primary" 
                                    onclick="openChat('${friend.user_id}', '${friend.nickname}')">
                                <i class="bi bi-chat-dots"></i> 发送消息
                            </button>
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('加载好友列表失败:', error);
            }
        }

        function setReceiver(qq) {
            document.getElementById('receiver-qq').value = qq;
            document.getElementById('message-content').focus();
        }

        // 加载群列表
        async function loadGroups() {
            try {
                const response = await fetch('/api/groups');
                const groups = await response.json();
                const tbody = document.getElementById('group-table-body');
                tbody.innerHTML = groups.map(group => `
                    <tr>
                        <td>${group.group_id}</td>
                        <td>${group.group_name}</td>
                        <td>
                            <span class="badge bg-secondary">
                                <i class="bi bi-people"></i> ${group.member_count}
                            </span>
                        </td>
                        <td>
                            <span class="badge ${group.enabled ? 'bg-success' : 'bg-danger'}">
                                <i class="bi ${group.enabled ? 'bi-check-circle' : 'bi-x-circle'}"></i>
                                ${group.enabled ? '已启用' : '已禁用'}
                            </span>
                        </td>
                        <td class="action-buttons">
                            <button class="btn btn-sm ${group.enabled ? 'btn-danger' : 'btn-success'}"
                                    onclick="toggleGroup(${group.group_id}, ${!group.enabled})">
                                <i class="bi ${group.enabled ? 'bi-x-lg' : 'bi-check-lg'}"></i>
                                ${group.enabled ? '禁用' : '启用'}
                            </button>
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('加载群列表失败:', error);
            }
        }

        // 刷新群列表
        function refreshGroups() {
            loadGroups();
        }

        // 切换群启用状态
        async function toggleGroup(groupId, enable) {
            try {
                const response = await fetch(`/api/group/${enable ? 'enable' : 'disable'}/${groupId}`, {
                    method: 'POST'
                });
                const result = await response.json();
                if (result.success) {
                    loadGroups(); // 重新加载群列表
                } else {
                    alert('操作失败');
                }
            } catch (error) {
                console.error('操作失败:', error);
                alert('操作失败');
            }
        }

        // 添加切换内容区域的函数
        function showSection(sectionId) {
            // 移除所有 nav-link 的 active 类
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            
            // 为当前点击的导航添加 active 类
            event.target.closest('.nav-link').classList.add('active');
            
            // 隐藏所有内容区域
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            // 显示选中的内容区域
            document.getElementById(sectionId).classList.add('active');
        }

        // 加载插件列表
        async function loadPlugins() {
            try {
                const response = await fetch('/api/plugins');
                const plugins = await response.json();
                const container = document.getElementById('plugin-container');
                container.innerHTML = plugins.map(plugin => `
                    <div class="col-md-4 mb-4">
                        <div class="card status-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="card-title mb-0">
                                        <i class="bi bi-puzzle"></i>
                                        ${plugin.name}
                                    </h5>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" 
                                               id="plugin-${plugin.name}"
                                               ${plugin.enabled ? 'checked' : ''}
                                               onchange="togglePlugin('${plugin.name}', this.checked)">
                                    </div>
                                </div>
                                <p class="card-text text-muted">
                                    ${plugin.description}
                                </p>
                            </div>
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                console.error('加载插件列表失败:', error);
            }
        }

        // 添加插件开关控制函数
        async function togglePlugin(name, enable) {
            try {
                const response = await fetch(`/api/plugins/${enable ? 'enable' : 'disable'}/${name}`, {
                    method: 'POST'
                });
                const result = await response.json();
                if (!result.success) {
                    alert('操作失败');
                    // 恢复开关状态
                    document.getElementById(`plugin-${name}`).checked = !enable;
                }
            } catch (error) {
                console.error('操作失败:', error);
                alert('操作失败');
                // 恢复开关状态
                document.getElementById(`plugin-${name}`).checked = !enable;
            }
        }

        // 页面加载完成后同时加载好友列表、群列表和插件列表
        document.addEventListener('DOMContentLoaded', () => {
            loadFriends();
            loadGroups();
            loadPlugins();
            loadLogs();
        });

        // 添加发送消息的处理
        document.getElementById('send-message-form').addEventListener('submit', async (e) => {
            e.preventDefault()
            const type = document.getElementById('message-type').value
            const target_id = document.getElementById('target-id').value
            const message = document.getElementById('message-content').value

            try {
                const response = await fetch('/api/send-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ type, target_id, message })
                })

                const result = await response.json()
                if (result.success) {
                    alert('发送成功！')
                    document.getElementById('message-content').value = ''
                } else {
                    alert('发送失败：' + result.error)
                }
            } catch (error) {
                alert('发送失败：' + error.message)
            }
        })

        // 选择器相关函数
        let selectorModal
        function showSelector() {
            if (!selectorModal) {
                selectorModal = new bootstrap.Modal(document.getElementById('selectorModal'))
            }
            const type = document.getElementById('message-type').value
            if (type === 'private') {
                loadFriendSelector()
            } else {
                loadGroupSelector()
            }
            selectorModal.show()
        }

        async function loadFriendSelector() {
            try {
                const response = await fetch('/api/friends')
                const friends = await response.json()
                const container = document.getElementById('friendSelector')
                container.innerHTML = friends.map(friend => `
                    <button type="button" class="list-group-item list-group-item-action"
                            onclick="selectTarget('${friend.user_id}')">
                        ${friend.nickname} (${friend.user_id})
                        ${friend.remark ? `[${friend.remark}]` : ''}
                    </button>
                `).join('')
            } catch (error) {
                console.error('加载好友列表失败:', error)
            }
        }

        async function loadGroupSelector() {
            try {
                const response = await fetch('/api/groups')
                const groups = await response.json()
                const container = document.getElementById('groupSelector')
                container.innerHTML = groups.map(group => `
                    <button type="button" class="list-group-item list-group-item-action"
                            onclick="selectTarget('${group.group_id}')"
                            ${!group.enabled ? 'disabled' : ''}>
                        ${group.group_name} (${group.group_id})
                        ${!group.enabled ? '<span class="badge bg-danger">已禁用</span>' : ''}
                    </button>
                `).join('')
            } catch (error) {
                console.error('加载群列表失败:', error)
            }
        }

        function selectTarget(id) {
            document.getElementById('target-id').value = id
            selectorModal.hide()
        }

        // 监听消息类型变化
        document.getElementById('message-type').addEventListener('change', function() {
            const type = this.value
            if (type === 'private') {
                document.getElementById('selectorTabs').querySelector('[href="#friendTab"]').click()
            } else {
                document.getElementById('selectorTabs').querySelector('[href="#groupTab"]').click()
            }
        })

        let autoScroll = true;
        let allLogs = [];  // 存储所有日志
        
        // 加载日志
        async function loadLogs() {
            try {
                const response = await fetch('/api/logs')
                allLogs = await response.json()
                filterLogs()
            } catch (error) {
                console.error('加载日志失败:', error)
            }
        }
        
        // 过滤日志
        function filterLogs() {
            const searchText = document.getElementById('log-search').value.toLowerCase()
            const enabledLevels = {
                log: document.getElementById('level-log').checked,
                info: document.getElementById('level-info').checked,
                warn: document.getElementById('level-warn').checked,
                error: document.getElementById('level-error').checked
            }
            
            const container = document.getElementById('log-container')
            container.innerHTML = allLogs
                .filter(log => {
                    return enabledLevels[log.level] && 
                           (!searchText || log.message.toLowerCase().includes(searchText))
                })
                .map(log => formatLogEntry(log, searchText))
                .join('\n')
            
            if (autoScroll) {
                container.scrollTop = container.scrollHeight
            }
        }
        
        // 清除搜索
        function clearSearch() {
            document.getElementById('log-search').value = ''
            filterLogs()
        }
        
        // 格式化日志条目
        function formatLogEntry(log, searchText = '') {
            const timestamp = new Date(log.timestamp).toLocaleString()
            let message = log.message
            
            // 如果有搜索文本，高亮显示
            if (searchText) {
                const regex = new RegExp(`(${searchText})`, 'gi')
                message = message.replace(regex, '<span class="highlight">$1</span>')
            }
            
            return `<div class="log-entry">
                <span class="log-timestamp">[${timestamp}]</span>
                <span class="log-level log-level-${log.level}">${log.level.toUpperCase()}</span>
                <span class="log-message">${message}</span>
            </div>`
        }
        
        // 导出日志
        function exportLogs() {
            const logs = allLogs.map(log => {
                const timestamp = new Date(log.timestamp).toLocaleString()
                return `[${timestamp}] [${log.level.toUpperCase()}] ${log.message}`
            }).join('\n')
            
            const blob = new Blob([logs], { type: 'text/plain' })
            const url = URL.createObjectURL(blob)
            const a = document.createElement('a')
            a.href = url
            a.download = `bot-logs-${new Date().toISOString().split('T')[0]}.txt`
            document.body.appendChild(a)
            a.click()
            document.body.removeChild(a)
            URL.revokeObjectURL(url)
        }
        
        // 切换自动滚动
        function toggleAutoScroll() {
            autoScroll = !autoScroll
            const button = document.getElementById('auto-scroll-toggle')
            button.innerHTML = autoScroll ? 
                '<i class="bi bi-arrow-down-circle"></i>' : 
                '<i class="bi bi-arrow-down-circle-fill"></i>'
            if (autoScroll) {
                const container = document.getElementById('log-container')
                container.scrollTop = container.scrollHeight
            }
        }
        
        // 监听新日志
        socket.on('log', (log) => {
            allLogs.push(log)
            if (allLogs.length > 1000) {
                allLogs.shift()
            }
            filterLogs()
        })
        
        // 监听日志清除事件
        socket.on('logsCleared', () => {
            allLogs = []
            filterLogs()
        })
        
        // 监听日志容器的滚动事件
        document.getElementById('log-container').addEventListener('scroll', function() {
            const atBottom = this.scrollHeight - this.scrollTop - this.clientHeight < 50
            autoScroll = atBottom
            const button = document.getElementById('auto-scroll-toggle')
            button.innerHTML = autoScroll ? 
                '<i class="bi bi-arrow-down-circle"></i>' : 
                '<i class="bi bi-arrow-down-circle-fill"></i>'
        })

        async function openChat(userId, nickname) {
            currentChatTarget = userId;
            currentChatInfo = {
                userId,
                nickname,
                avatar: `http://q1.qlogo.cn/g?b=qq&nk=${userId}&s=100`
            };
            
            document.getElementById('chatWindow').style.display = 'flex';
            document.getElementById('chatTitle').textContent = `与 ${nickname} 聊天中`;
            document.getElementById('chatAvatar').src = currentChatInfo.avatar;
            document.getElementById('chatMessages').innerHTML = '';
            document.getElementById('messageInput').focus();
        }

        function closeChat() {
            document.getElementById('chatWindow').style.display = 'none';
            currentChatTarget = null;
        }

        function addMessage(content, isSent) {
            try {
                console.log('添加消息:', { content, isSent }); // 添加日志
                const messagesDiv = document.getElementById('chatMessages');
                if (!messagesDiv) {
                    console.error('找不到消息容器');
                    return;
                }

                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${isSent ? 'sent' : 'received'}`;
                
                // 创建头像元素
                const avatar = document.createElement('img');
                avatar.className = 'chat-avatar';
                avatar.src = isSent ? 
                    `http://q1.qlogo.cn/g?b=qq&nk=${botInfo?.qq || ''}}&s=100` : 
                    (currentChatInfo?.avatar || '');
                
                // 创建消息内容容器
                const contentContainer = document.createElement('div');
                contentContainer.className = 'chat-content';
                
                // 添加时间
                const timeDiv = document.createElement('div');
                timeDiv.className = 'message-time';
                timeDiv.textContent = new Date().toLocaleTimeString();
                contentContainer.appendChild(timeDiv);
                
                // 创建消息气泡
                const bubbleDiv = document.createElement('div');
                bubbleDiv.className = 'chat-bubble';
                
                // 处理消息内容
                if (typeof content === 'string' && content.startsWith('http') && 
                    (content.endsWith('.jpg') || content.endsWith('.png') || content.endsWith('.gif'))) {
                    const img = document.createElement('img');
                    img.src = content;
                    img.className = 'chat-image';
                    img.onclick = () => window.open(content);
                    bubbleDiv.appendChild(img);
                } else {
                    bubbleDiv.textContent = String(content || ''); // 确保内容是字符串且不为 null
                }
                
                contentContainer.appendChild(bubbleDiv);
                
                // 组装消息
                if (isSent) {
                    messageDiv.appendChild(contentContainer);
                    messageDiv.appendChild(avatar);
                } else {
                    messageDiv.appendChild(avatar);
                    messageDiv.appendChild(contentContainer);
                }
                
                messagesDiv.appendChild(messageDiv);
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            } catch (error) {
                console.error('添加消息失败:', error);
            }
        }

        async function sendChatMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            if (!message || !currentChatTarget) return;

            try {
                // 先显示消息并清空输入框
                const messageToSend = message;
                input.value = '';
                addMessage(messageToSend, true);

                const response = await fetch('/api/send-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        type: 'private',
                        target_id: currentChatTarget,
                        message: messageToSend
                    })
                });

                const result = await response.json();
                if (!result.success) {
                    // 如果发送失败，显示错误
                    console.error('发送失败:', result.error);
                    alert('发送失败: ' + result.error);
                }
            } catch (error) {
                console.error('发送消息失败:', error);
                alert('发送失败');
            }
        }

        async function handleImageUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            try {
                const formData = new FormData();
                formData.append('image', file);

                const response = await fetch('/api/upload-image', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const { url } = await response.json();
                    sendImage(url);
                } else {
                    alert('上传失败');
                }
            } catch (error) {
                console.error('上传图片失败:', error);
                alert('上传失败');
            }
        }

        function showEmojiPicker() {
            const picker = document.getElementById('emojiPicker');
            if (picker.style.display === 'none') {
                if (!picker.hasChildNodes()) {
                    const emojis = ['😀', '😂', '🤣', '😊', '😍', '🥰', '😘', '😎', '🤔', '😏', '😮', '😴', '😷', '🤒', '🤕', '🤑', '🤠', '😈', '👿', '👹', '👺', '💀', '👻', '👽', '🤖', '💩', '😺', '😸', '😹', '😻', '😼', '😽', '🙀'];
                    emojis.forEach(emoji => {
                        const span = document.createElement('span');
                        span.className = 'emoji-item';
                        span.textContent = emoji;
                        span.onclick = () => {
                            document.getElementById('messageInput').value += emoji;
                            picker.style.display = 'none';
                        };
                        picker.appendChild(span);
                    });
                }
                picker.style.display = 'grid';
            } else {
                picker.style.display = 'none';
            }
        }

        // 修改 socket.on('privateMessage') 处理
        socket.on('privateMessage', (data) => {
            try {
                console.log('收到私聊消息:', data);
                if (!data || !currentChatTarget) return;

                // 如果消息来自当前聊天的用户，则显示消息
                if (data.sender_id === parseInt(currentChatTarget)) {
                    // 处理不同类型的消息
                    if (Array.isArray(data.message)) {
                        data.message.forEach(msg => {
                            if (msg.type === 'text') {
                                addMessage(msg.text, false);
                            } else if (msg.type === 'image') {
                                addMessage(msg.file, false);
                            }
                        });
                    } else if (typeof data.message === 'object') {
                        if (data.message.type === 'text') {
                            addMessage(data.message.text, false);
                        } else if (data.message.type === 'image') {
                            addMessage(data.message.file, false);
                        }
                    } else {
                        // 直接显示消息内容
                        addMessage(data.raw_message || data.message, false);
                    }
                }
            } catch (error) {
                console.error('处理私聊消息失败:', error);
            }
        });

        // 修改 sendImage 函数的错误处理
        async function sendImage(url) {
            if (!currentChatTarget) return;

            try {
                const response = await fetch('/api/send-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        type: 'private',
                        target_id: currentChatTarget,
                        message: [
                            {
                                type: 'image',
                                file: url
                            }
                        ]
                    })
                });

                const result = await response.json();
                if (result.success) {
                    // 图片已发送到服务器，等待发送状态
                    addMessage(url, true);
                }
            } catch (error) {
                console.error('发送图片失败:', error);
                alert('发送图片失败');
            }
        }

        // 在 script 标签中添加
        socket.on('messageSent', (data) => {
            if (currentChatTarget && data.target_id === parseInt(currentChatTarget)) {
                if (data.success) {
                    // 消息发送成功，不需要显示提示
                    console.log('消息发送成功');
                } else {
                    // 消息发送失败，显示错误
                    console.error('消息发送失败:', data.error);
                    alert('发送失败: ' + (data.error || '未知错误'));
                }
            }
        });
    </script>
</body>
</html> 